from flask import Blueprint, request, jsonify
import os
from typing import List, Dict
import random
import json
import re

# Create blueprint
word_graph_bp = Blueprint('word_graph', __name__)

@word_graph_bp.route('/api/word-graph/generate', methods=['POST'])
def generate_word_graph():
    try:
        data = request.get_json()
        topic = data.get('topic', 'Technology')
        
        # hardocded sample data
        sample_words = [
            {
                "term": f"{topic} Concept 1",
                "summary": f"A brief summary of {topic} Concept 1.",
                "description": f"Detailed description of {topic} Concept 1. This would normally be generated by Gemini AI. It provides in-depth information about the concept and how it relates to {topic}.",
                "related_concepts": [f"{topic} Concept 3", f"{topic} Concept 5"],
                "examples": [f"Example 1 for {topic} Concept 1", f"Example 2 for {topic} Concept 1"]
            },
            {
                "term": f"{topic} Concept 2",
                "summary": f"A brief summary of {topic} Concept 2.",
                "description": f"Detailed description of {topic} Concept 2. This would normally be generated by Gemini AI. It provides in-depth information about the concept and how it relates to {topic}.",
                "related_concepts": [f"{topic} Concept 1", f"{topic} Concept 4"],
                "examples": [f"Example 1 for {topic} Concept 2", f"Example 2 for {topic} Concept 2"]
            },
            {
                "term": f"{topic} Concept 3",
                "summary": f"A brief summary of {topic} Concept 3.",
                "description": f"Detailed description of {topic} Concept 3. This would normally be generated by Gemini AI. It provides in-depth information about the concept and how it relates to {topic}.",
                "related_concepts": [f"{topic} Concept 2", f"{topic} Concept 5"],
                "examples": [f"Example 1 for {topic} Concept 3", f"Example 2 for {topic} Concept 3"]
            },
            {
                "term": f"{topic} Concept 4",
                "summary": f"A brief summary of {topic} Concept 4.",
                "description": f"Detailed description of {topic} Concept 4. This would normally be generated by Gemini AI. It provides in-depth information about the concept and how it relates to {topic}.",
                "related_concepts": [f"{topic} Concept 1", f"{topic} Concept 5"],
                "examples": [f"Example 1 for {topic} Concept 4", f"Example 2 for {topic} Concept 4"]
            },
            {
                "term": f"{topic} Concept 5",
                "summary": f"A brief summary of {topic} Concept 5.",
                "description": f"Detailed description of {topic} Concept 5. This would normally be generated by Gemini AI. It provides in-depth information about the concept and how it relates to {topic}.",
                "related_concepts": [f"{topic} Concept 2", f"{topic} Concept 3"],
                "examples": [f"Example 1 for {topic} Concept 5", f"Example 2 for {topic} Concept 5"]
            }
        ]
        
        # Create a dictionary to map terms to their indices
        term_to_index = {word["term"]: i for i, word in enumerate(sample_words)}
        
        # Generate correlations based on related concepts
        correlations = []
        for i, word1 in enumerate(sample_words):
            # Check if any of word1's related concepts match other nodes' terms
            for related_concept in word1.get("related_concepts", []):
                # If the related concept exists as a node
                if related_concept in term_to_index:
                    j = term_to_index[related_concept]
                    # Don't create self-loops
                    if i != j:
                        correlations.append({
                            'source': f"node-{i}",
                            'target': f"node-{j}",
                            'explanation': f"{word1['term']} includes {related_concept} as a related concept"
                        })

        # Format the response for React Flow
        nodes = [
            {
                'id': f"node-{i}",
                'data': {
                    'label': word['term'],
                    'summary': word['summary'],
                    'description': word['description'],
                    'relatedTopics': word['related_concepts'],
                    'examples': word['examples']
                },
                'position': {'x': i * 250, 'y': 0},
                'type': 'wordNode',
                'sourcePosition': 'right',
                'targetPosition': 'left'
            }
            for i, word in enumerate(sample_words)
        ]

        edges = [
            {
                'id': f"edge-{i}",
                'source': corr['source'],
                'target': corr['target'],
                'animated': True,
                'style': {'stroke': '#3b82f6', 'strokeWidth': 2},
                'data': {'explanation': corr['explanation']}
            }
            for i, corr in enumerate(correlations)
        ]

        return jsonify({
            'nodes': nodes,
            'edges': edges
        })

    except Exception as e:
        print(f"Error in generate_word_graph: {str(e)}")
        return jsonify({'error': str(e)}), 500